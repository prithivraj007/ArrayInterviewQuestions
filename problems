Here are the solutions for the **first five array-based coding questions**:

---

### **1. Find the Second Largest Element**
**Problem:** Given an array, find the second largest element.  
**Approach:** Traverse the array while maintaining the largest and second largest elements.

```java
public class SecondLargest {
    public static int findSecondLargest(int[] arr) {
        if (arr.length < 2) return -1; // Not enough elements
        
        int largest = Integer.MIN_VALUE, secondLargest = Integer.MIN_VALUE;
        
        for (int num : arr) {
            if (num > largest) {
                secondLargest = largest;
                largest = num;
            } else if (num > secondLargest && num != largest) {
                secondLargest = num;
            }
        }
        
        return (secondLargest == Integer.MIN_VALUE) ? -1 : secondLargest;
    }

    public static void main(String[] args) {
        int[] arr = {10, 20, 4, 45, 99, 99};
        System.out.println("Second Largest: " + findSecondLargest(arr)); // Output: 45
    }
}
```
---
### **2. Reverse an Array**
**Problem:** Reverse the given array in-place.  
**Approach:** Use two pointers: swap first and last elements, move inward.

```java
import java.util.Arrays;

public class ReverseArray {
    public static void reverse(int[] arr) {
        int left = 0, right = arr.length - 1;
        while (left < right) {
            int temp = arr[left];
            arr[left] = arr[right];
            arr[right] = temp;
            left++;
            right--;
        }
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        reverse(arr);
        System.out.println("Reversed Array: " + Arrays.toString(arr)); // Output: [5, 4, 3, 2, 1]
    }
}
```
---
### **3. Move All Zeros to the End**
**Problem:** Move all `0`s to the end while maintaining the relative order of other elements.  
**Approach:** Use two pointers: one for iterating and the other for placing non-zero elements.

```java
import java.util.Arrays;

public class MoveZeros {
    public static void moveZerosToEnd(int[] arr) {
        int index = 0; // Pointer for placing non-zero elements
        
        for (int num : arr) {
            if (num != 0) {
                arr[index++] = num;
            }
        }
        
        while (index < arr.length) {
            arr[index++] = 0;
        }
    }

    public static void main(String[] args) {
        int[] arr = {0, 1, 0, 3, 12};
        moveZerosToEnd(arr);
        System.out.println("Array after moving zeros: " + Arrays.toString(arr));
        // Output: [1, 3, 12, 0, 0]
    }
}
```
---
### **4. Find the Missing Number in an Array**
**Problem:** Given an array containing `n` numbers from `1 to n+1` with one missing, find the missing number.  
**Approach:** Use sum formula: `Sum(1 to n) - Actual sum of array`.

```java
public class MissingNumber {
    public static int findMissingNumber(int[] arr, int n) {
        int totalSum = n * (n + 1) / 2; // Sum of first N natural numbers
        int actualSum = 0;
        
        for (int num : arr) {
            actualSum += num;
        }
        
        return totalSum - actualSum;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 5};
        System.out.println("Missing Number: " + findMissingNumber(arr, 5)); // Output: 4
    }
}
```
---
### **5. Find Duplicate Element in an Array**
**Problem:** Find the duplicate number in an array where numbers are in the range `[1, n]`.  
**Approach:** Use Floydâ€™s Tortoise and Hare cycle detection (O(n) time, O(1) space).

```java
public class FindDuplicate {
    public static int findDuplicate(int[] arr) {
        int slow = arr[0], fast = arr[0];
        
        do {
            slow = arr[slow];
            fast = arr[arr[fast]];
        } while (slow != fast);

        slow = arr[0];
        while (slow != fast) {
            slow = arr[slow];
            fast = arr[fast];
        }

        return slow;
    }

    public static void main(String[] args) {
        int[] arr = {1, 3, 4, 2, 2};
        System.out.println("Duplicate Number: " + findDuplicate(arr)); // Output: 2
    }
}
```
---
### **Would you like solutions for more questions? ðŸš€**
